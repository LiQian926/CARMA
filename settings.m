function status = settings()
%SETTINGS Code for the Configure Settings window and functions
% License: https://carma.codeplex.com/license
    
    % Create and center main window
    defaultBackground = get(0,'defaultUicontrolBackgroundColor');
    handles.figure_settings = figure(...
        'Name','CARMA: Settings',...
        'NumberTitle','off',...
        'MenuBar','none',...
        'Resize','off',...
        'Position',[0 0 520 200],...
        'Visible','off',...
        'Color',defaultBackground);
    % Create uicontrol elements in figure
    c1 = .02; w = c1+.92*2/3; c2 = c1*2+w;
    handles.panel_slider = uipanel(...
        'Parent',handles.figure_settings,...
        'Units','Normalized',...
        'Position',[c1 .25 w .70]);
    handles.panel_scale = uipanel(...
        'Parent',handles.figure_settings,...
        'Units','Normalized',...
        'Position',[c2 .25 1-c2-c1 .70]);
    handles.button_load = uicontrol(...
        'Parent',handles.figure_settings,...
        'Units','Normalized',...
        'Position',[c1 .05 .92/3 .15],...
        'String','Load Default Settings',...
        'Callback',{@button_load_Callback,handles});
    handles.button_save = uicontrol(...
        'Parent',handles.figure_settings,...
        'Units','Normalized',...
        'Position',[c1*2+.92/3 .05 .92/3 .15],...
        'String','Save as Default Settings',...
        'Callback',{@button_save_Callback,handles});
    handles.button_apply = uicontrol(...
        'Parent',handles.figure_settings,...
        'Units','Normalized',...
        'Position',[c1*3+.92*2/3 .05 .92/3 .15],...
        'String','Apply Current Settings',...
        'Callback',{@button_apply_Callback,handles});
    % Create uicontrol elements in panel_slider
    nr = 5; %number of rows
    nc = 2; %number of columns
    sh = .015; %horizontal spacing
    sv = .05; %vertical spacing
    w = (1-sh*(nc+1))/nc;
    h = (1-sv*(nr+1))/nr;
    c1 = sh; c2 = c1+w+sh;
    r5 = sv; r4 = r5+h+sv; r3 = r4+h+sv; r2 = r3+h+sv; r1 = r2+h+sv;
    % Text label and control for text_axis_min
    uicontrol(handles.panel_slider,...
        'Style','text',...
        'Units','normalized',...
        'Position',[c1 r1 w h],...
        'String','Axis Upper Label',...
        'HorizontalAlign','left');
    handles.text_axis_upper = uicontrol(handles.panel_slider,...
        'Style','edit',...
        'Units','normalized',...
        'Position',[c2 r1 w h],...
        'BackgroundColor',[1 1 1]);
    % Text label and control for text_axis_max
    uicontrol(handles.panel_slider,...
        'Style','text',...
        'Units','normalized',...
        'Position',[c1 r2 w h],...
        'String','Axis Maximum Value',...
        'HorizontalAlign','left');
    handles.text_axis_max = uicontrol(handles.panel_slider,...
        'Style','edit',...
        'Units','normalized',...
        'Position',[c2 r2 w h],...
        'BackgroundColor',[1 1 1]);
    % Text label and control for text_axis_steps
    uicontrol(handles.panel_slider,...
        'Style','text',...
        'Units','normalized',...
        'Position',[c1 r3 w h],...
        'String','Number of Steps',...
        'HorizontalAlign','left');
    handles.text_axis_steps = uicontrol(handles.panel_slider,...
        'Style','edit',...
        'Units','normalized',...
        'Position',[c2 r3 w h],...
        'BackgroundColor',[1 1 1]);
    % Text label and control for text_axis_min
    uicontrol(handles.panel_slider,...
        'Style','text',...
        'Units','normalized',...
        'Position',[c1 r4 w h],...
        'String','Axis Minimum Value',...
        'HorizontalAlign','left');
    handles.text_axis_min = uicontrol(handles.panel_slider,...
        'Style','edit',...
        'Units','normalized',...
        'Position',[c2 r4 w h],...
        'BackgroundColor',[1 1 1]);
    % Text label and control for text_axis_lower
    uicontrol(handles.panel_slider,...
        'Style','text',...
        'Units','normalized',...
        'Position',[c1 r5 w h],...
        'String','Axis Lower Label',...
        'HorizontalAlign','left');
    handles.text_axis_lower = uicontrol(handles.panel_slider,...
        'Style','edit',...
        'Units','normalized',...
        'Position',[c2 r5 w h],...
        'BackgroundColor',[1 1 1]);
    % Create color gradient buttons
    uicontrol(handles.panel_scale,...
        'Style','text',...
        'Units','normalized',...
        'Position',[c1*2 r1 1-c1*4 h],...
        'String','Color Gradient',...
        'HorizontalAlign','center');
    handles.button_axis_color1 = uicontrol(handles.panel_scale,...
        'Style','pushbutton',...
        'Units','normalized',...
        'Position',[c1*2 r2 1-c1*4 h],...
        'String','Upper Color',...
        'Callback',{@button_axis_color_Callback,handles});
    handles.button_axis_color2 = uicontrol(handles.panel_scale,...
        'Style','pushbutton',...
        'Units','normalized',...
        'Position',[c1*2 r3 1-c1*4 h],...
        'String','Middle Color',...
        'Callback',{@button_axis_color_Callback,handles});
    handles.button_axis_color3 = uicontrol(handles.panel_scale,...
        'Style','pushbutton',...
        'Units','normalized',...
        'Position',[c1*2 r4 1-c1*4 h],...
        'String','Lower Color',...
        'Callback',{@button_axis_color_Callback,handles});
    % Center and reveal figure
    movegui(handles.figure_settings,'center');
    set(handles.figure_settings,'Visible','on');
    % Load current settings or, if missing, default settings
    if exist(fullfile(ctfroot,'settings.mat'),'file')~=0
        Settings = importdata(fullfile(ctfroot,'settings.mat'));
    else
        Settings = importdata(fullfile(ctfroot,'default.mat'));
        save(fullfile(ctfroot,'settings.mat'),'Settings');
    end
    % Populate settings options with appropriate text/colors
    set(handles.text_axis_lower,'String',Settings.axis_lower);
    set(handles.text_axis_upper,'String',Settings.axis_upper);
    set(handles.button_axis_color1,'BackgroundColor',Settings.axis_color1);
    set(handles.button_axis_color2,'BackgroundColor',Settings.axis_color2);
    set(handles.button_axis_color3,'BackgroundColor',Settings.axis_color3);
    set(handles.text_axis_min,'String',Settings.axis_min);
    set(handles.text_axis_max,'String',Settings.axis_max);
    set(handles.text_axis_steps,'String',Settings.axis_steps);
    % Save handles to guidata
    guidata(handles.figure_settings,handles);
    status = 0;
end

% --- Executes on button press in button_load_defaults.
function button_load_Callback(~,~,handles)
    handles = guidata(handles.figure_settings);
    % Load Default Settings
    Settings = importdata(fullfile(ctfroot,'default.mat'));
    % Populate settings options with appropriate text/colors
    set(handles.text_axis_lower,'String',Settings.axis_lower);
    set(handles.text_axis_upper,'String',Settings.axis_upper);
    set(handles.button_axis_color1,'BackgroundColor',Settings.axis_color1);
    set(handles.button_axis_color2,'BackgroundColor',Settings.axis_color2);
    set(handles.button_axis_color3,'BackgroundColor',Settings.axis_color3);
    set(handles.text_axis_min,'String',Settings.axis_min);
    set(handles.text_axis_max,'String',Settings.axis_max);
    set(handles.text_axis_steps,'String',Settings.axis_steps);
    guidata(handles.figure_settings,handles);
end

% --- Executes on button press in button_save_default.
function button_save_Callback(~,~,handles)
    handles = guidata(handles.figure_settings);
    % Save the current configuration as default settings
    Settings = get_settings(handles);
    save(fullfile(ctfroot,'default.mat'),'Settings');
    msgbox('Current settings saved as default.');
end

% --- Executes on button press in button_apply_changes.
function button_apply_Callback(~,~,handles)
    handles = guidata(handles.figure_settings);
    % Save the current configuration as current and close Settings window
    Settings = get_settings(handles);
    save(fullfile(ctfroot,'settings.mat'),'Settings');
    status = 1;
    close;
    return;
end

% --- Executes on button press in button_axis_color.
function button_axis_color_Callback(hObject,~,handles)
    % Prompt the user to select a color and recolor the button
    c = uisetcolor('Select a color.');
    set(hObject,'BackgroundColor',c);
end

% --- Called from multiple other functions.
function Settings = get_settings(handles)
    handles = guidata(handles.figure_settings);
    % Get current configuration from GUI elements
    Settings.axis_lower = get(handles.text_axis_lower,'string');
    Settings.axis_upper = get(handles.text_axis_upper,'string');
    Settings.axis_color1 = get(handles.button_axis_color1,'BackgroundColor');
    Settings.axis_color2 = get(handles.button_axis_color2,'BackgroundColor');
    Settings.axis_color3 = get(handles.button_axis_color3,'BackgroundColor');
    Settings.axis_min = get(handles.text_axis_min,'string');
    Settings.axis_max = get(handles.text_axis_max,'string');
    Settings.axis_steps = get(handles.text_axis_steps,'string');
    % Check for errors in configuration
    if isempty(Settings.axis_min) || isempty(Settings.axis_max) || isempty(Settings.axis_steps)
        serror = errordlg('All numerical options must be specified.');
        uiwait(serror); return;
    end
    if str2double(Settings.axis_min) >= str2double(Settings.axis_max)
        serror = errordlg('Maximum Value must be greater than Minimum Value.');
        uiwait(serror); return;
    end
    steps = str2double(Settings.axis_steps);
    if isnan(steps) || steps <= 1 || ceil(steps) ~= floor(steps)
        serror = errordlg('Number of Axis Steps must be a positive integer greater than 1.');
        uiwait(serror); return;
    end
end